import pprint
import re  # noqa: F401

import six

class IntegrationDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'title': 'str',
        'name_identifier': 'str',
        'short_description': 'str',
        'icon': 'str',
        'release_status': 'AllOfIntegrationDtoReleaseStatus',
        'launch_date': 'datetime',
        'documentation_url': 'str',
        'swagger_url': 'str',
        'integration_endpoints': 'list[IntegrationEndpointDto]',
        'integration_events': 'list[IntegrationEventDto]'
    }

    attribute_map = {
        'id': 'id',
        'title': 'title',
        'name_identifier': 'nameIdentifier',
        'short_description': 'shortDescription',
        'icon': 'icon',
        'release_status': 'releaseStatus',
        'launch_date': 'launchDate',
        'documentation_url': 'documentationUrl',
        'swagger_url': 'swaggerUrl',
        'integration_endpoints': 'integrationEndpoints',
        'integration_events': 'integrationEvents'
    }

    def __init__(self, id=None, title=None, name_identifier=None, short_description=None, icon=None, release_status=None, launch_date=None, documentation_url=None, swagger_url=None, integration_endpoints=None, integration_events=None):  # noqa: E501
        """IntegrationDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._title = None
        self._name_identifier = None
        self._short_description = None
        self._icon = None
        self._release_status = None
        self._launch_date = None
        self._documentation_url = None
        self._swagger_url = None
        self._integration_endpoints = None
        self._integration_events = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if title is not None:
            self.title = title
        if name_identifier is not None:
            self.name_identifier = name_identifier
        if short_description is not None:
            self.short_description = short_description
        if icon is not None:
            self.icon = icon
        if release_status is not None:
            self.release_status = release_status
        if launch_date is not None:
            self.launch_date = launch_date
        if documentation_url is not None:
            self.documentation_url = documentation_url
        if swagger_url is not None:
            self.swagger_url = swagger_url
        if integration_endpoints is not None:
            self.integration_endpoints = integration_endpoints
        if integration_events is not None:
            self.integration_events = integration_events

    @property
    def id(self):
        """Gets the id of this IntegrationDto.  # noqa: E501


        :return: The id of this IntegrationDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IntegrationDto.


        :param id: The id of this IntegrationDto.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def title(self):
        """Gets the title of this IntegrationDto.  # noqa: E501


        :return: The title of this IntegrationDto.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this IntegrationDto.


        :param title: The title of this IntegrationDto.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def name_identifier(self):
        """Gets the name_identifier of this IntegrationDto.  # noqa: E501


        :return: The name_identifier of this IntegrationDto.  # noqa: E501
        :rtype: str
        """
        return self._name_identifier

    @name_identifier.setter
    def name_identifier(self, name_identifier):
        """Sets the name_identifier of this IntegrationDto.


        :param name_identifier: The name_identifier of this IntegrationDto.  # noqa: E501
        :type: str
        """

        self._name_identifier = name_identifier

    @property
    def short_description(self):
        """Gets the short_description of this IntegrationDto.  # noqa: E501


        :return: The short_description of this IntegrationDto.  # noqa: E501
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this IntegrationDto.


        :param short_description: The short_description of this IntegrationDto.  # noqa: E501
        :type: str
        """

        self._short_description = short_description

    @property
    def icon(self):
        """Gets the icon of this IntegrationDto.  # noqa: E501


        :return: The icon of this IntegrationDto.  # noqa: E501
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this IntegrationDto.


        :param icon: The icon of this IntegrationDto.  # noqa: E501
        :type: str
        """

        self._icon = icon

    @property
    def release_status(self):
        """Gets the release_status of this IntegrationDto.  # noqa: E501

          0 = Released  1 = Pending  2 = NotPlanned  # noqa: E501

        :return: The release_status of this IntegrationDto.  # noqa: E501
        :rtype: AllOfIntegrationDtoReleaseStatus
        """
        return self._release_status

    @release_status.setter
    def release_status(self, release_status):
        """Sets the release_status of this IntegrationDto.

          0 = Released  1 = Pending  2 = NotPlanned  # noqa: E501

        :param release_status: The release_status of this IntegrationDto.  # noqa: E501
        :type: AllOfIntegrationDtoReleaseStatus
        """

        self._release_status = release_status

    @property
    def launch_date(self):
        """Gets the launch_date of this IntegrationDto.  # noqa: E501


        :return: The launch_date of this IntegrationDto.  # noqa: E501
        :rtype: datetime
        """
        return self._launch_date

    @launch_date.setter
    def launch_date(self, launch_date):
        """Sets the launch_date of this IntegrationDto.


        :param launch_date: The launch_date of this IntegrationDto.  # noqa: E501
        :type: datetime
        """

        self._launch_date = launch_date

    @property
    def documentation_url(self):
        """Gets the documentation_url of this IntegrationDto.  # noqa: E501


        :return: The documentation_url of this IntegrationDto.  # noqa: E501
        :rtype: str
        """
        return self._documentation_url

    @documentation_url.setter
    def documentation_url(self, documentation_url):
        """Sets the documentation_url of this IntegrationDto.


        :param documentation_url: The documentation_url of this IntegrationDto.  # noqa: E501
        :type: str
        """

        self._documentation_url = documentation_url

    @property
    def swagger_url(self):
        """Gets the swagger_url of this IntegrationDto.  # noqa: E501


        :return: The swagger_url of this IntegrationDto.  # noqa: E501
        :rtype: str
        """
        return self._swagger_url

    @swagger_url.setter
    def swagger_url(self, swagger_url):
        """Sets the swagger_url of this IntegrationDto.


        :param swagger_url: The swagger_url of this IntegrationDto.  # noqa: E501
        :type: str
        """

        self._swagger_url = swagger_url

    @property
    def integration_endpoints(self):
        """Gets the integration_endpoints of this IntegrationDto.  # noqa: E501


        :return: The integration_endpoints of this IntegrationDto.  # noqa: E501
        :rtype: list[IntegrationEndpointDto]
        """
        return self._integration_endpoints

    @integration_endpoints.setter
    def integration_endpoints(self, integration_endpoints):
        """Sets the integration_endpoints of this IntegrationDto.


        :param integration_endpoints: The integration_endpoints of this IntegrationDto.  # noqa: E501
        :type: list[IntegrationEndpointDto]
        """

        self._integration_endpoints = integration_endpoints

    @property
    def integration_events(self):
        """Gets the integration_events of this IntegrationDto.  # noqa: E501


        :return: The integration_events of this IntegrationDto.  # noqa: E501
        :rtype: list[IntegrationEventDto]
        """
        return self._integration_events

    @integration_events.setter
    def integration_events(self, integration_events):
        """Sets the integration_events of this IntegrationDto.


        :param integration_events: The integration_events of this IntegrationDto.  # noqa: E501
        :type: list[IntegrationEventDto]
        """

        self._integration_events = integration_events

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IntegrationDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IntegrationDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
