import pprint
import re  # noqa: F401

import six

class AddIntegrationToApplicationRequestDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'application_id': 'str',
        'integration_id': 'str',
        'is_public_integration': 'bool'
    }

    attribute_map = {
        'application_id': 'applicationId',
        'integration_id': 'integrationId',
        'is_public_integration': 'isPublicIntegration'
    }

    def __init__(self, application_id=None, integration_id=None, is_public_integration=None):  # noqa: E501
        """AddIntegrationToApplicationRequestDto - a model defined in Swagger"""  # noqa: E501
        self._application_id = None
        self._integration_id = None
        self._is_public_integration = None
        self.discriminator = None
        if application_id is not None:
            self.application_id = application_id
        if integration_id is not None:
            self.integration_id = integration_id
        if is_public_integration is not None:
            self.is_public_integration = is_public_integration

    @property
    def application_id(self):
        """Gets the application_id of this AddIntegrationToApplicationRequestDto.  # noqa: E501


        :return: The application_id of this AddIntegrationToApplicationRequestDto.  # noqa: E501
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this AddIntegrationToApplicationRequestDto.


        :param application_id: The application_id of this AddIntegrationToApplicationRequestDto.  # noqa: E501
        :type: str
        """

        self._application_id = application_id

    @property
    def integration_id(self):
        """Gets the integration_id of this AddIntegrationToApplicationRequestDto.  # noqa: E501


        :return: The integration_id of this AddIntegrationToApplicationRequestDto.  # noqa: E501
        :rtype: str
        """
        return self._integration_id

    @integration_id.setter
    def integration_id(self, integration_id):
        """Sets the integration_id of this AddIntegrationToApplicationRequestDto.


        :param integration_id: The integration_id of this AddIntegrationToApplicationRequestDto.  # noqa: E501
        :type: str
        """

        self._integration_id = integration_id

    @property
    def is_public_integration(self):
        """Gets the is_public_integration of this AddIntegrationToApplicationRequestDto.  # noqa: E501


        :return: The is_public_integration of this AddIntegrationToApplicationRequestDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_public_integration

    @is_public_integration.setter
    def is_public_integration(self, is_public_integration):
        """Sets the is_public_integration of this AddIntegrationToApplicationRequestDto.


        :param is_public_integration: The is_public_integration of this AddIntegrationToApplicationRequestDto.  # noqa: E501
        :type: bool
        """

        self._is_public_integration = is_public_integration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddIntegrationToApplicationRequestDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddIntegrationToApplicationRequestDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
