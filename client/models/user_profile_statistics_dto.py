import pprint
import re  # noqa: F401

import six

class UserProfileStatisticsDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'available_integrations': 'int',
        'available_api_calls': 'int',
        'applications_count': 'int'
    }

    attribute_map = {
        'available_integrations': 'availableIntegrations',
        'available_api_calls': 'availableApiCalls',
        'applications_count': 'applicationsCount'
    }

    def __init__(self, available_integrations=None, available_api_calls=None, applications_count=None):  # noqa: E501
        """UserProfileStatisticsDto - a model defined in Swagger"""  # noqa: E501
        self._available_integrations = None
        self._available_api_calls = None
        self._applications_count = None
        self.discriminator = None
        if available_integrations is not None:
            self.available_integrations = available_integrations
        if available_api_calls is not None:
            self.available_api_calls = available_api_calls
        if applications_count is not None:
            self.applications_count = applications_count

    @property
    def available_integrations(self):
        """Gets the available_integrations of this UserProfileStatisticsDto.  # noqa: E501


        :return: The available_integrations of this UserProfileStatisticsDto.  # noqa: E501
        :rtype: int
        """
        return self._available_integrations

    @available_integrations.setter
    def available_integrations(self, available_integrations):
        """Sets the available_integrations of this UserProfileStatisticsDto.


        :param available_integrations: The available_integrations of this UserProfileStatisticsDto.  # noqa: E501
        :type: int
        """

        self._available_integrations = available_integrations

    @property
    def available_api_calls(self):
        """Gets the available_api_calls of this UserProfileStatisticsDto.  # noqa: E501


        :return: The available_api_calls of this UserProfileStatisticsDto.  # noqa: E501
        :rtype: int
        """
        return self._available_api_calls

    @available_api_calls.setter
    def available_api_calls(self, available_api_calls):
        """Sets the available_api_calls of this UserProfileStatisticsDto.


        :param available_api_calls: The available_api_calls of this UserProfileStatisticsDto.  # noqa: E501
        :type: int
        """

        self._available_api_calls = available_api_calls

    @property
    def applications_count(self):
        """Gets the applications_count of this UserProfileStatisticsDto.  # noqa: E501


        :return: The applications_count of this UserProfileStatisticsDto.  # noqa: E501
        :rtype: int
        """
        return self._applications_count

    @applications_count.setter
    def applications_count(self, applications_count):
        """Sets the applications_count of this UserProfileStatisticsDto.


        :param applications_count: The applications_count of this UserProfileStatisticsDto.  # noqa: E501
        :type: int
        """

        self._applications_count = applications_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserProfileStatisticsDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserProfileStatisticsDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
