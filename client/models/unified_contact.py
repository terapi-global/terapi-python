import pprint
import re  # noqa: F401

import six

class UnifiedContact(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'external_id': 'str',
        'company_name': 'str',
        'company_id': 'str',
        'platform_source': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'phone_numbers': 'list[str]',
        'email': 'str',
        'profile_url': 'str'
    }

    attribute_map = {
        'external_id': 'externalId',
        'company_name': 'companyName',
        'company_id': 'companyId',
        'platform_source': 'platformSource',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'phone_numbers': 'phoneNumbers',
        'email': 'email',
        'profile_url': 'profileUrl'
    }

    def __init__(self, external_id=None, company_name=None, company_id=None, platform_source=None, first_name=None, last_name=None, phone_numbers=None, email=None, profile_url=None):  # noqa: E501
        """UnifiedContact - a model defined in Swagger"""  # noqa: E501
        self._external_id = None
        self._company_name = None
        self._company_id = None
        self._platform_source = None
        self._first_name = None
        self._last_name = None
        self._phone_numbers = None
        self._email = None
        self._profile_url = None
        self.discriminator = None
        self.external_id = external_id
        self.company_name = company_name
        self.company_id = company_id
        self.platform_source = platform_source
        self.first_name = first_name
        self.last_name = last_name
        self.phone_numbers = phone_numbers
        self.email = email
        self.profile_url = profile_url

    @property
    def external_id(self):
        """Gets the external_id of this UnifiedContact.  # noqa: E501


        :return: The external_id of this UnifiedContact.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this UnifiedContact.


        :param external_id: The external_id of this UnifiedContact.  # noqa: E501
        :type: str
        """
        if external_id is None:
            raise ValueError("Invalid value for `external_id`, must not be `None`")  # noqa: E501

        self._external_id = external_id

    @property
    def company_name(self):
        """Gets the company_name of this UnifiedContact.  # noqa: E501


        :return: The company_name of this UnifiedContact.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this UnifiedContact.


        :param company_name: The company_name of this UnifiedContact.  # noqa: E501
        :type: str
        """
        if company_name is None:
            raise ValueError("Invalid value for `company_name`, must not be `None`")  # noqa: E501

        self._company_name = company_name

    @property
    def company_id(self):
        """Gets the company_id of this UnifiedContact.  # noqa: E501


        :return: The company_id of this UnifiedContact.  # noqa: E501
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this UnifiedContact.


        :param company_id: The company_id of this UnifiedContact.  # noqa: E501
        :type: str
        """
        if company_id is None:
            raise ValueError("Invalid value for `company_id`, must not be `None`")  # noqa: E501

        self._company_id = company_id

    @property
    def platform_source(self):
        """Gets the platform_source of this UnifiedContact.  # noqa: E501


        :return: The platform_source of this UnifiedContact.  # noqa: E501
        :rtype: str
        """
        return self._platform_source

    @platform_source.setter
    def platform_source(self, platform_source):
        """Sets the platform_source of this UnifiedContact.


        :param platform_source: The platform_source of this UnifiedContact.  # noqa: E501
        :type: str
        """
        if platform_source is None:
            raise ValueError("Invalid value for `platform_source`, must not be `None`")  # noqa: E501

        self._platform_source = platform_source

    @property
    def first_name(self):
        """Gets the first_name of this UnifiedContact.  # noqa: E501


        :return: The first_name of this UnifiedContact.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UnifiedContact.


        :param first_name: The first_name of this UnifiedContact.  # noqa: E501
        :type: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this UnifiedContact.  # noqa: E501


        :return: The last_name of this UnifiedContact.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UnifiedContact.


        :param last_name: The last_name of this UnifiedContact.  # noqa: E501
        :type: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")  # noqa: E501

        self._last_name = last_name

    @property
    def phone_numbers(self):
        """Gets the phone_numbers of this UnifiedContact.  # noqa: E501


        :return: The phone_numbers of this UnifiedContact.  # noqa: E501
        :rtype: list[str]
        """
        return self._phone_numbers

    @phone_numbers.setter
    def phone_numbers(self, phone_numbers):
        """Sets the phone_numbers of this UnifiedContact.


        :param phone_numbers: The phone_numbers of this UnifiedContact.  # noqa: E501
        :type: list[str]
        """
        if phone_numbers is None:
            raise ValueError("Invalid value for `phone_numbers`, must not be `None`")  # noqa: E501

        self._phone_numbers = phone_numbers

    @property
    def email(self):
        """Gets the email of this UnifiedContact.  # noqa: E501


        :return: The email of this UnifiedContact.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UnifiedContact.


        :param email: The email of this UnifiedContact.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def profile_url(self):
        """Gets the profile_url of this UnifiedContact.  # noqa: E501


        :return: The profile_url of this UnifiedContact.  # noqa: E501
        :rtype: str
        """
        return self._profile_url

    @profile_url.setter
    def profile_url(self, profile_url):
        """Sets the profile_url of this UnifiedContact.


        :param profile_url: The profile_url of this UnifiedContact.  # noqa: E501
        :type: str
        """
        if profile_url is None:
            raise ValueError("Invalid value for `profile_url`, must not be `None`")  # noqa: E501

        self._profile_url = profile_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UnifiedContact, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UnifiedContact):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
