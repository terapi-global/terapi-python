import pprint
import re  # noqa: F401

import six

class IntegrationListDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total_records': 'int',
        'current_page': 'int',
        'per_page': 'int',
        'items': 'list[IntegrationDto]'
    }

    attribute_map = {
        'total_records': 'totalRecords',
        'current_page': 'currentPage',
        'per_page': 'perPage',
        'items': 'items'
    }

    def __init__(self, total_records=None, current_page=None, per_page=None, items=None):  # noqa: E501
        """IntegrationListDto - a model defined in Swagger"""  # noqa: E501
        self._total_records = None
        self._current_page = None
        self._per_page = None
        self._items = None
        self.discriminator = None
        self.total_records = total_records
        self.current_page = current_page
        self.per_page = per_page
        self.items = items

    @property
    def total_records(self):
        """Gets the total_records of this IntegrationListDto.  # noqa: E501


        :return: The total_records of this IntegrationListDto.  # noqa: E501
        :rtype: int
        """
        return self._total_records

    @total_records.setter
    def total_records(self, total_records):
        """Sets the total_records of this IntegrationListDto.


        :param total_records: The total_records of this IntegrationListDto.  # noqa: E501
        :type: int
        """
        if total_records is None:
            raise ValueError("Invalid value for `total_records`, must not be `None`")  # noqa: E501

        self._total_records = total_records

    @property
    def current_page(self):
        """Gets the current_page of this IntegrationListDto.  # noqa: E501


        :return: The current_page of this IntegrationListDto.  # noqa: E501
        :rtype: int
        """
        return self._current_page

    @current_page.setter
    def current_page(self, current_page):
        """Sets the current_page of this IntegrationListDto.


        :param current_page: The current_page of this IntegrationListDto.  # noqa: E501
        :type: int
        """
        if current_page is None:
            raise ValueError("Invalid value for `current_page`, must not be `None`")  # noqa: E501

        self._current_page = current_page

    @property
    def per_page(self):
        """Gets the per_page of this IntegrationListDto.  # noqa: E501


        :return: The per_page of this IntegrationListDto.  # noqa: E501
        :rtype: int
        """
        return self._per_page

    @per_page.setter
    def per_page(self, per_page):
        """Sets the per_page of this IntegrationListDto.


        :param per_page: The per_page of this IntegrationListDto.  # noqa: E501
        :type: int
        """
        if per_page is None:
            raise ValueError("Invalid value for `per_page`, must not be `None`")  # noqa: E501

        self._per_page = per_page

    @property
    def items(self):
        """Gets the items of this IntegrationListDto.  # noqa: E501


        :return: The items of this IntegrationListDto.  # noqa: E501
        :rtype: list[IntegrationDto]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this IntegrationListDto.


        :param items: The items of this IntegrationListDto.  # noqa: E501
        :type: list[IntegrationDto]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")  # noqa: E501

        self._items = items

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IntegrationListDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IntegrationListDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
