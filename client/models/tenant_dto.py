import pprint
import re  # noqa: F401

import six

class TenantDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'provided_name': 'str',
        'invited_email_address': 'str',
        'invitation_status': 'AllOfTenantDtoInvitationStatus',
        'application_integration': 'AllOfTenantDtoApplicationIntegration',
        'client_secret': 'str',
        'client_id': 'str',
        'webhook_url': 'str',
        'authorized_origin_url': 'str',
        'id': 'str'
    }

    attribute_map = {
        'provided_name': 'providedName',
        'invited_email_address': 'invitedEmailAddress',
        'invitation_status': 'invitationStatus',
        'application_integration': 'applicationIntegration',
        'client_secret': 'clientSecret',
        'client_id': 'clientId',
        'webhook_url': 'webhookUrl',
        'authorized_origin_url': 'authorizedOriginUrl',
        'id': 'id'
    }

    def __init__(self, provided_name=None, invited_email_address=None, invitation_status=None, application_integration=None, client_secret=None, client_id=None, webhook_url=None, authorized_origin_url=None, id=None):  # noqa: E501
        """TenantDto - a model defined in Swagger"""  # noqa: E501
        self._provided_name = None
        self._invited_email_address = None
        self._invitation_status = None
        self._application_integration = None
        self._client_secret = None
        self._client_id = None
        self._webhook_url = None
        self._authorized_origin_url = None
        self._id = None
        self.discriminator = None
        if provided_name is not None:
            self.provided_name = provided_name
        if invited_email_address is not None:
            self.invited_email_address = invited_email_address
        if invitation_status is not None:
            self.invitation_status = invitation_status
        if application_integration is not None:
            self.application_integration = application_integration
        if client_secret is not None:
            self.client_secret = client_secret
        if client_id is not None:
            self.client_id = client_id
        if webhook_url is not None:
            self.webhook_url = webhook_url
        if authorized_origin_url is not None:
            self.authorized_origin_url = authorized_origin_url
        if id is not None:
            self.id = id

    @property
    def provided_name(self):
        """Gets the provided_name of this TenantDto.  # noqa: E501


        :return: The provided_name of this TenantDto.  # noqa: E501
        :rtype: str
        """
        return self._provided_name

    @provided_name.setter
    def provided_name(self, provided_name):
        """Sets the provided_name of this TenantDto.


        :param provided_name: The provided_name of this TenantDto.  # noqa: E501
        :type: str
        """

        self._provided_name = provided_name

    @property
    def invited_email_address(self):
        """Gets the invited_email_address of this TenantDto.  # noqa: E501


        :return: The invited_email_address of this TenantDto.  # noqa: E501
        :rtype: str
        """
        return self._invited_email_address

    @invited_email_address.setter
    def invited_email_address(self, invited_email_address):
        """Sets the invited_email_address of this TenantDto.


        :param invited_email_address: The invited_email_address of this TenantDto.  # noqa: E501
        :type: str
        """

        self._invited_email_address = invited_email_address

    @property
    def invitation_status(self):
        """Gets the invitation_status of this TenantDto.  # noqa: E501

          0 = Invited  1 = Accepted  2 = Declined  # noqa: E501

        :return: The invitation_status of this TenantDto.  # noqa: E501
        :rtype: AllOfTenantDtoInvitationStatus
        """
        return self._invitation_status

    @invitation_status.setter
    def invitation_status(self, invitation_status):
        """Sets the invitation_status of this TenantDto.

          0 = Invited  1 = Accepted  2 = Declined  # noqa: E501

        :param invitation_status: The invitation_status of this TenantDto.  # noqa: E501
        :type: AllOfTenantDtoInvitationStatus
        """

        self._invitation_status = invitation_status

    @property
    def application_integration(self):
        """Gets the application_integration of this TenantDto.  # noqa: E501


        :return: The application_integration of this TenantDto.  # noqa: E501
        :rtype: AllOfTenantDtoApplicationIntegration
        """
        return self._application_integration

    @application_integration.setter
    def application_integration(self, application_integration):
        """Sets the application_integration of this TenantDto.


        :param application_integration: The application_integration of this TenantDto.  # noqa: E501
        :type: AllOfTenantDtoApplicationIntegration
        """

        self._application_integration = application_integration

    @property
    def client_secret(self):
        """Gets the client_secret of this TenantDto.  # noqa: E501


        :return: The client_secret of this TenantDto.  # noqa: E501
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this TenantDto.


        :param client_secret: The client_secret of this TenantDto.  # noqa: E501
        :type: str
        """

        self._client_secret = client_secret

    @property
    def client_id(self):
        """Gets the client_id of this TenantDto.  # noqa: E501


        :return: The client_id of this TenantDto.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this TenantDto.


        :param client_id: The client_id of this TenantDto.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def webhook_url(self):
        """Gets the webhook_url of this TenantDto.  # noqa: E501


        :return: The webhook_url of this TenantDto.  # noqa: E501
        :rtype: str
        """
        return self._webhook_url

    @webhook_url.setter
    def webhook_url(self, webhook_url):
        """Sets the webhook_url of this TenantDto.


        :param webhook_url: The webhook_url of this TenantDto.  # noqa: E501
        :type: str
        """

        self._webhook_url = webhook_url

    @property
    def authorized_origin_url(self):
        """Gets the authorized_origin_url of this TenantDto.  # noqa: E501


        :return: The authorized_origin_url of this TenantDto.  # noqa: E501
        :rtype: str
        """
        return self._authorized_origin_url

    @authorized_origin_url.setter
    def authorized_origin_url(self, authorized_origin_url):
        """Sets the authorized_origin_url of this TenantDto.


        :param authorized_origin_url: The authorized_origin_url of this TenantDto.  # noqa: E501
        :type: str
        """

        self._authorized_origin_url = authorized_origin_url

    @property
    def id(self):
        """Gets the id of this TenantDto.  # noqa: E501


        :return: The id of this TenantDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TenantDto.


        :param id: The id of this TenantDto.  # noqa: E501
        :type: str
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TenantDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TenantDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
